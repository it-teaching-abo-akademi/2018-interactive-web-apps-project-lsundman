{"version":3,"sources":["helpers.ts","component/Ticker.tsx","component/StorageBackedComponent.ts","component/AddForm.tsx","component/Portfolio.tsx","component/Popup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MILLI_DAY_FACTOR","_callee","symbol","regenerator_default","a","wrap","_context","prev","next","abrupt","getApiConnection","stocks","quote","datatype","then","data","parseInt","stop","this","_callee2","labels","_context2","daily","outputsize","series","map","day","days","b","result","aTime","Date","getTime","bTime","unshift","date","concat","getFullYear","getMonth","slice","getDate","dateToString","Ticker","_React$Component","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getId","btoa","amount","componentDidMount","_x","_getQuote","apply","arguments","getQuote","setState","price","invalidSymbol","undefined","onPriceChange","state","inherits","createClass","key","value","quoteLabel","quoteLabelTotal","_this2","currency","Math","round","forexRate","total","react_default","createElement","className","type","onChange","evt","onSelect","target","checked","selected","React","Component","StorageBackedComponent","defaultStateGet","storage","window","localStorage","componentWillMount","loadState","componentWillUnmount","saveState","get","prototype","assertThisInitialized","stored","getItem","JSON","parse","setItem","stringify","AddForm","tickerSymbol","shareAmount","onSubmit","e","preventDefault","addTicker","onClick","cancel","Portfolio","_StorageBackedCompone","shareList","viewMain","addStock","some","elem","shareSymbol","alert","toConsumableArray","removeStocks","symbolList","filter","includes","setSelected","itemName","share","name","table","body","tickers","item","Ticker_Ticker","newPrice","length","reduce","disabled","onGraphShow","component_AddForm","onRemove","Popup","updateData","componentDidUpdate","prevProps","graphStart","graphEnd","dataSetsList","forEach","getDataPoints","label","subtrahend","dateA","dateB","onCloseButtonClick","es","datasets","list","options","spanGaps","redraw","API_CONN","AlphaVantage","App","portfolioList","addFieldValue","graphList","forex","rate","addPortfolio","removePortfolio","popup","portfolios","Portfolio_Portfolio","component_Popup","apiConnection","placeholder","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2631e64.chunk.js","sourcesContent":["import { getApiConnection } from \"./App\";\n\n// 24h is this many milliseconds\nconst MILLI_DAY_FACTOR = 86400000;\n\nexport async function getQuote(symbol: string): Promise<any> {\n  return getApiConnection()\n    .stocks.quote(symbol, { datatype: \"json\" })\n    .then(data => {\n      if (data[\"Global Quote\"] === {}) {\n        return undefined;\n      } else {\n        return parseInt(data[\"Global Quote\"][\"05. price\"]);\n      }\n    });\n}\n\nasync function getDataPoints(\n  symbol: string,\n  labels: string[]\n): Promise<number[]> {\n  return getApiConnection()\n    .stocks.daily(symbol, {\n      outputsize: \"full\",\n      datatype: \"json\"\n    })\n    .then(data => {\n      let series = data[\"Time Series (Daily)\"];\n      return labels.map(day => {\n        if (day in series) {\n          return series[day][\"4. close\"];\n        } else {\n          return undefined;\n        }\n      });\n    });\n}\n\nfunction days(a: string, b: string): string[] {\n  let result: Date[] = [];\n  let aTime = new Date(a).getTime();\n  let bTime = new Date(b).getTime();\n\n  while (bTime >= aTime) {\n    // Pushing date to the top of the array in order to keep it sorted\n    result.unshift(new Date(bTime));\n    bTime = bTime - MILLI_DAY_FACTOR;\n  }\n\n  return result.map(\n    date =>\n      `${date.getFullYear()}-${(\"0\" + (date.getMonth() + 1)).slice(-2)}-${(\n        \"0\" + date.getDate()\n      ).slice(-2)}`\n  );\n}\n\nfunction dayDiff(a: Date, b: Date): number {\n  return Math.abs(b.getTime() - a.getTime()) / MILLI_DAY_FACTOR;\n}\n\nfunction subDays(date: Date, subtrahend: number): Date {\n  return new Date(date.getTime() - subtrahend * MILLI_DAY_FACTOR);\n}\n\nfunction dateToString(date: Date) {\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n}\n\nfunction stringToDate(dateString: string) {\n  let [year, month, day] = dateString.split(\"-\").map(e => parseInt(e));\n  return new Date(year, month - 1, day + 1);\n}\n\nexport { days, dayDiff, stringToDate, dateToString, subDays, getDataPoints };\n","import React from \"react\";\nimport StorageBackedComponent from \"./StorageBackedComponent\";\nimport { getQuote } from \"../helpers\";\n\nexport class Ticker extends React.Component<\n  {\n    symbol: string;\n    amount: number;\n    onSelect: (selected: boolean) => void;\n    onPriceChange: (newPrice: number) => void;\n    selected: boolean;\n    currency: \"USD\" | \"EUR\";\n    forexRate: number;\n  },\n  { price: number | undefined; invalidSymbol: boolean }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      price: undefined,\n      invalidSymbol: false\n    };\n  }\n\n  getId = () => {\n    return `SPMS-ticker: ${btoa(this.props.symbol + this.props.amount)}`;\n  };\n\n  componentDidMount = () => {\n    getQuote(this.props.symbol).then(data => {\n      this.setState({\n        price: data,\n        invalidSymbol: data === undefined\n      });\n      if (data != undefined) {\n        this.props.onPriceChange(data * this.props.amount);\n      }\n    });\n  };\n\n  render() {\n    let quoteLabel;\n    let quoteLabelTotal;\n\n    if (this.state.price === undefined) {\n      quoteLabel = \"...\";\n      quoteLabelTotal = \"...\";\n    } else {\n      quoteLabel =\n        this.props.currency === \"USD\"\n          ? `$ ${this.state.price}`\n          : `€ ${Math.round(this.state.price * this.props.forexRate * 100) /\n              100}`;\n      let total = Math.round(this.state.price * this.props.amount * 100) / 100;\n      quoteLabelTotal =\n        this.props.currency === \"USD\"\n          ? `$ ${total}`\n          : `€ ${Math.round(total * this.props.forexRate * 100) / 100}`;\n    }\n\n    return (\n      <tr className={this.state.invalidSymbol ? \"invalid-symbol\" : \"\"}>\n        <td>\n          <input\n            type=\"checkbox\"\n            onChange={evt => this.props.onSelect(evt.target.checked)}\n            checked={this.props.selected}\n          />\n        </td>\n        <td> {this.props.symbol} </td>\n        <td>{quoteLabel}</td>\n        <td> {this.props.amount} </td>\n        <td>{quoteLabelTotal}</td>\n      </tr>\n    );\n  }\n}\n","import { Component } from \"react\";\n\nabstract class StorageBackedComponent<TS, Props> extends Component<Props> {\n  state: TS;\n  storage = window.localStorage;\n  defaultStateGet: () => TS;\n\n  constructor(props: Props, defaultStateGet: () => TS) {\n    super(props);\n    this.defaultStateGet = defaultStateGet;\n    this.state = this.defaultStateGet();\n  }\n\n  abstract getId(): string;\n\n  componentWillMount = () => {\n    this.setState(this.loadState());\n  };\n\n  componentWillUnmount = () => {\n    this.saveState(this.state);\n  };\n\n  setState = (state: TS) => {\n    super.setState(state);\n    this.saveState(state);\n  };\n\n  loadState = () => {\n    let stored = this.storage.getItem(this.getId());\n    return stored != undefined ? JSON.parse(stored) : this.defaultStateGet();\n  };\n\n  saveState = (state: TS) => {\n    this.storage.setItem(this.getId(), JSON.stringify(state));\n  };\n}\n\nexport default StorageBackedComponent;\n","import React, { Component } from \"react\";\n\nclass AddForm extends Component<{\n  addTicker: (tickerSymbol: string, shareAmount: number) => void;\n  cancel: () => void;\n}> {\n  state: {\n    tickerSymbol: string;\n    shareAmount: number;\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.state = { tickerSymbol: \"\", shareAmount: 1 };\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (this.state.tickerSymbol !== \"\" && this.state.shareAmount !== 0)\n            this.props.addTicker(\n              this.state.tickerSymbol,\n              this.state.shareAmount\n            );\n        }}\n      >\n        <label>\n          Ticker symbol\n          <input\n            type=\"text\"\n            value={this.state.tickerSymbol}\n            onChange={e => {\n              this.setState({ tickerSymbol: e.target.value });\n            }}\n          />\n        </label>\n        <label>\n          Quantity\n          <input\n            type=\"number\"\n            value={this.state.shareAmount}\n            onChange={e => {\n              this.setState({ shareAmount: e.target.value });\n            }}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n        <button onClick={() => this.props.cancel()}>Cancel</button>\n      </form>\n    );\n  }\n}\n\nexport default AddForm;\n","import React, { Component } from \"react\";\nimport { Ticker } from \"./Ticker\";\nimport StorageBackedComponent from \"./StorageBackedComponent\";\nimport AddForm from \"./AddForm\";\n\ntype PortfolioState = {\n  shareList: {\n    shareSymbol: string;\n    shareAmount: number;\n    selected: boolean;\n    price: number;\n  }[];\n  viewMain: boolean;\n};\n\ntype PortfolioProps = {\n  name: string;\n  onRemove: () => void;\n  onGraphShow: (data: string[]) => void;\n  forexRate: number;\n  currency: \"USD\" | \"EUR\";\n};\n\nexport class Portfolio extends StorageBackedComponent<\n  PortfolioState,\n  PortfolioProps\n> {\n  constructor(props: PortfolioProps) {\n    super(props, () => {\n      return { shareList: [], viewMain: true, currency: \"USD\" };\n    });\n  }\n\n  addStock = (symbol: string, amount: number) => {\n    if (!this.state.shareList.some(elem => elem.shareSymbol === symbol)) {\n      this.setState({\n        shareList: [\n          ...this.state.shareList,\n          {\n            shareSymbol: symbol,\n            shareAmount: amount,\n            selected: false,\n            price: -1\n          }\n        ],\n        viewMain: true\n      });\n    } else {\n      window.alert(\"You've already added this stock!\");\n    }\n  };\n\n  removeStocks = (symbolList: string[]) => {\n    this.setState({\n      shareList: this.state.shareList.filter(\n        elem => !symbolList.includes(elem.shareSymbol)\n      ),\n      viewMain: true\n    });\n  };\n\n  setSelected = (itemName: string, selected: boolean) => {\n    this.setState({\n      shareList: this.state.shareList.map(share =>\n        share.shareSymbol === itemName\n          ? {\n              shareSymbol: share.shareSymbol,\n              shareAmount: share.shareAmount,\n              selected: selected,\n              price: share.price\n            }\n          : share\n      ),\n      viewMain: this.state.viewMain\n    });\n  };\n\n  getId = (): string => {\n    return `SPMS-portfolio-${this.props.name}`;\n  };\n\n  render() {\n    const tickers = this.state.shareList.map(item => (\n      <Ticker\n        key={`${item.shareSymbol}-${item.shareAmount}`}\n        symbol={item.shareSymbol}\n        amount={item.shareAmount}\n        onSelect={selected => this.setSelected(item.shareSymbol, selected)}\n        onPriceChange={newPrice => {\n          this.setState({\n            shareList: this.state.shareList.map(share =>\n              share.shareSymbol === item.shareSymbol\n                ? {\n                    shareSymbol: share.shareSymbol,\n                    shareAmount: share.shareAmount,\n                    selected: share.selected,\n                    price: newPrice\n                  }\n                : share\n            ),\n            viewMain: this.state.viewMain\n          });\n        }}\n        selected={item.selected}\n        currency={this.props.currency}\n        forexRate={this.props.forexRate}\n      />\n    ));\n\n    let table;\n\n    if (tickers.length > 0) {\n      table = (\n        <table>\n          <thead>\n            <tr>\n              <th />\n              <th>Stock</th>\n              <th>Price</th>\n              <th>Quantity</th>\n              <th>Total value</th>\n            </tr>\n          </thead>\n          <tbody>{tickers}</tbody>\n          <tfoot>\n            <tr>\n              <td />\n              <td />\n              <td />\n              <td />\n              <td>\n                {this.props.currency === \"USD\" ? \"$ \" : \"€ \"}\n                {Math.round(\n                  this.state.shareList\n                    .map(share => share.price)\n                    .reduce((a, b) => a + b) *\n                    (this.props.currency === \"USD\" ? 1 : this.props.forexRate) *\n                    100\n                ) / 100}\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      );\n    }\n\n    let body;\n\n    if (this.state.viewMain) {\n      body = (\n        <div>\n          {table}\n          <div className=\"button-row\">\n            <button\n              onClick={() => {\n                this.setState({\n                  shareList: this.state.shareList,\n                  viewMain: false\n                });\n              }}\n            >\n              Add stock\n            </button>\n            <button\n              disabled={!this.state.shareList.some(e => e.selected)}\n              onClick={() => {\n                this.removeStocks(\n                  this.state.shareList\n                    .filter(elem => elem.selected)\n                    .map(elem => elem.shareSymbol)\n                );\n              }}\n            >\n              Remove selected\n            </button>\n            <button\n              disabled={!this.state.shareList.some(e => e.selected)}\n              onClick={() =>\n                this.props.onGraphShow(\n                  this.state.shareList\n                    .filter(item => item.selected)\n                    .map(item => item.shareSymbol)\n                )\n              }\n            >\n              Show graph\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      body = (\n        <AddForm\n          addTicker={this.addStock}\n          cancel={() => {\n            this.setState({\n              shareList: this.state.shareList,\n              viewMain: true\n            });\n          }}\n        />\n      );\n    }\n    return (\n      <li className=\"spms-portfolio\">\n        <button\n          className=\"close-button\"\n          onClick={() => {\n            this.props.onRemove();\n          }}\n        >\n          X\n        </button>\n        <div>\n          <h2>{this.props.name}</h2>\n          {body}\n        </div>\n      </li>\n    );\n  }\n}\n","import React, { Component, Props } from \"react\";\nimport AlphaVantage from \"alphavantage-ts\";\nimport { Line } from \"react-chartjs-2\";\nimport { subDays, getDataPoints, dateToString, days } from \"../helpers\";\n\ntype PopupState = {\n  graphStart: string;\n  graphEnd: string;\n  labels: string[];\n  dataSetsList: { label: string; data: number[] }[];\n};\n\ntype PopupProps = {\n  shareList: string[];\n  onCloseButtonClick: (() => void);\n  apiConnection: AlphaVantage;\n  currency: \"USD\" | \"EUR\";\n  forexRate: number;\n};\n\nclass Popup extends Component<PopupProps, PopupState> {\n  constructor(props: PopupProps) {\n    super(props);\n\n    let dateA = dateToString(subDays(new Date(), 7));\n    let dateB = dateToString(new Date());\n    let labels = days(dateA, dateB);\n\n    this.state = {\n      graphStart: dateA,\n      graphEnd: dateB,\n      labels: labels,\n      dataSetsList: []\n    };\n  }\n\n  componentWillMount = () => {\n    this.updateData();\n  };\n\n  componentDidUpdate = (prevProps: PopupProps) => {\n    if (prevProps.shareList != this.props.shareList) {\n      this.setState({\n        graphStart: this.state.graphStart,\n        graphEnd: this.state.graphEnd,\n        labels: this.state.labels,\n        dataSetsList: []\n      });\n      this.updateData();\n    }\n  };\n\n  updateData = () => {\n    this.props.shareList.forEach(share => {\n      getDataPoints(share, this.state.labels).then(data => {\n        this.setState({\n          graphStart: this.state.graphStart,\n          graphEnd: this.state.graphEnd,\n          labels: this.state.labels,\n          dataSetsList: [\n            ...this.state.dataSetsList,\n            { label: share, data: data }\n          ]\n        });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"graph\">\n        <button\n          className=\"close-button\"\n          onClick={this.props.onCloseButtonClick}\n        >\n          X\n        </button>\n        <Line\n          data={{\n            labels: this.state.labels,\n            datasets:\n              this.props.currency === \"USD\"\n                ? this.state.dataSetsList\n                : this.state.dataSetsList.map(list => {\n                    return {\n                      label: list.label,\n                      data: list.data.map(\n                        value =>\n                          Math.round(value * this.props.forexRate * 100) / 100\n                      )\n                    };\n                  })\n          }}\n          options={{ spanGaps: true }}\n          redraw={true}\n        />\n        <input\n          type=\"date\"\n          value={this.state.graphStart}\n          onChange={evt => {\n            this.setState({\n              graphStart: evt.target.value,\n              graphEnd: this.state.graphEnd,\n              labels: days(evt.target.value, this.state.graphStart),\n              dataSetsList: this.state.dataSetsList\n            });\n            this.updateData();\n          }}\n        />\n        <input\n          type=\"date\"\n          value={this.state.graphEnd}\n          onChange={evt => {\n            this.setState({\n              graphStart: this.state.graphStart,\n              graphEnd: evt.target.value,\n              labels: days(this.state.graphStart, evt.target.value),\n              dataSetsList: this.state.dataSetsList\n            });\n            this.updateData();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Popup;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Portfolio } from \"./component/Portfolio\";\nimport AlphaVantage from \"alphavantage-ts\";\nimport StorageBackedComponent from \"./component/StorageBackedComponent\";\nimport Popup from \"./component/Popup\";\nimport Api from \"alphavantage-ts/dist/api\";\n\nlet API_CONN = new AlphaVantage(\"9LUUJN34EO841037\");\n\nexport function getApiConnection(): AlphaVantage {\n  return API_CONN;\n}\n\ntype SpmsState = {\n  portfolioList: string[];\n  addFieldValue: string;\n  graphList: string[];\n  forexRate: number;\n  currency: \"USD\" | \"EUR\";\n};\n\nclass App extends StorageBackedComponent<SpmsState, {}> {\n  constructor(props: any) {\n    super(props, () => {\n      return {\n        portfolioList: [],\n        addFieldValue: \"\",\n        graphList: [],\n        forexRate: 1,\n        currency: \"USD\"\n      };\n    });\n  }\n\n  componentDidMount = () => {\n    if (this.state.forexRate === 1) {\n      getApiConnection()\n        .forex.rate(\"USD\", \"EUR\")\n        .then(result => {\n          this.setState({\n            forexRate:\n              result[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"],\n            graphList: this.state.graphList,\n            portfolioList: this.state.portfolioList,\n            addFieldValue: this.state.addFieldValue,\n            currency: this.state.currency\n          });\n        });\n    }\n  };\n\n  addPortfolio = (evt: any) => {\n    evt.preventDefault();\n    if (this.state.portfolioList.length < 10) {\n      if (this.state.addFieldValue != \"\") {\n        if (\n          !this.state.portfolioList.some(\n            elem => elem === this.state.addFieldValue\n          )\n        ) {\n          this.setState({\n            portfolioList: [\n              ...this.state.portfolioList,\n              this.state.addFieldValue\n            ],\n            addFieldValue: \"\",\n            graphList: this.state.graphList,\n            forexRate: this.state.forexRate,\n            currency: this.state.currency\n          });\n        } else {\n          window.alert(\"Portfolio names should be unique\");\n        }\n      }\n    } else {\n      window.alert(\n        \"You can only have 10 portfolios configured at the same time\"\n      );\n    }\n  };\n\n  removePortfolio = (name: string) => {\n    if (name != \"\") {\n      this.setState({\n        portfolioList: this.state.portfolioList.filter(elem => elem != name),\n        addFieldValue: \"\",\n        graphList: this.state.graphList,\n        forexRate: this.state.forexRate,\n        currency: this.state.currency\n      });\n    }\n  };\n\n  getId = (): string => {\n    return \"SPMS-app\";\n  };\n\n  render() {\n    const portfolios = this.state.portfolioList.map(item => (\n      <Portfolio\n        key={item}\n        name={item}\n        onRemove={() => this.removePortfolio(item)}\n        onGraphShow={data => {\n          this.setState({\n            portfolioList: this.state.portfolioList,\n            addFieldValue: this.state.addFieldValue,\n            graphList: data,\n            forexRate: this.state.forexRate,\n            currency: this.state.currency\n          });\n        }}\n        forexRate={this.state.forexRate}\n        currency={this.state.currency}\n      />\n    ));\n\n    let popup;\n\n    popup =\n      this.state.graphList.length > 0 ? (\n        <Popup\n          shareList={this.state.graphList}\n          apiConnection={getApiConnection()}\n          onCloseButtonClick={() => {\n            this.setState({\n              portfolioList: this.state.portfolioList,\n              addFieldValue: this.state.addFieldValue,\n              graphList: [],\n              forexRate: this.state.forexRate,\n              currency: this.state.currency\n            });\n          }}\n          forexRate={this.state.forexRate}\n          currency={this.state.currency}\n        />\n      ) : null;\n\n    return (\n      <div>\n        <div className=\"header\">\n          <form onSubmit={this.addPortfolio}>\n            <input\n              className=\"add-portfolio-field\"\n              onChange={evt => {\n                this.setState({\n                  portfolioList: this.state.portfolioList,\n                  addFieldValue: evt.target.value,\n                  graphList: this.state.graphList,\n                  forexRate: this.state.forexRate,\n                  currency: this.state.currency\n                });\n              }}\n              type=\"text\"\n              value={this.state.addFieldValue}\n              placeholder=\"Enter portfolio name here and press enter\"\n            />\n          </form>\n          <button\n            onClick={() => {\n              this.setState({\n                currency: this.state.currency === \"USD\" ? \"EUR\" : \"USD\",\n                portfolioList: this.state.portfolioList,\n                addFieldValue: this.state.addFieldValue,\n                graphList: this.state.graphList,\n                forexRate: this.state.forexRate\n              });\n            }}\n          >\n            {this.state.currency === \"USD\" ? \"$\" : \"€\"}\n          </button>\n        </div>\n        {popup}\n        <ul>{portfolios}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}