{"version":3,"sources":["helpers.ts","component/Ticker.tsx","component/StorageBackedComponent.ts","component/AddForm.tsx","component/Portfolio.tsx","component/Popup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MILLI_DAY_FACTOR","_callee","symbol","regenerator_default","a","wrap","_context","prev","next","abrupt","getApiConnection","stocks","quote","datatype","then","data","stop","this","_callee2","labels","_context2","daily","outputsize","series","map","day","days","b","result","aTime","Date","getTime","bTime","unshift","date","concat","getFullYear","getMonth","slice","getDate","dateToString","Ticker","_React$Component","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getId","btoa","amount","componentDidMount","_x","_getQuote","apply","arguments","getQuote","setState","price","invalidSymbol","undefined","state","inherits","createClass","key","value","quoteLabel","quoteLabelTotal","_this2","Math","round","react_default","createElement","className","type","onChange","evt","onSelect","target","checked","selected","React","Component","StorageBackedComponent","defaultStateGet","storage","window","localStorage","componentWillMount","loadState","componentWillUnmount","saveState","get","prototype","assertThisInitialized","stored","getItem","JSON","parse","setItem","stringify","AddForm","tickerSymbol","shareAmount","onSubmit","e","preventDefault","addTicker","onClick","cancel","Portfolio","_StorageBackedCompone","shareList","viewMain","addStock","some","elem","shareSymbol","alert","toConsumableArray","removeStocks","symbolList","filter","includes","setSelected","itemName","share","name","table","body","tickers","item","Ticker_Ticker","length","disabled","onGraphShow","component_AddForm","onRemove","Popup","updateData","componentDidUpdate","prevProps","graphStart","graphEnd","dataSetsList","forEach","getDataPoints","label","subtrahend","dateA","dateB","onCloseButtonClick","es","datasets","options","spanGaps","redraw","API_CONN","AlphaVantage","App","portfolioList","addFieldValue","graphList","addPortfolio","removePortfolio","popup","portfolios","Portfolio_Portfolio","component_Popup","apiConnection","placeholder","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd984d39.chunk.js","sourcesContent":["import { getApiConnection } from \"./App\";\n\n// 24h is this many milliseconds\nconst MILLI_DAY_FACTOR = 86400000;\n\nexport async function getQuote(symbol: string): Promise<number> {\n  return getApiConnection()\n    .stocks.quote(symbol, { datatype: \"json\" })\n    .then(data => {\n      if (data[\"Global Quote\"] === {}) {\n        return undefined;\n      } else {\n        return data[\"Global Quote\"][\"05. price\"];\n      }\n    });\n}\n\nasync function getDataPoints(\n  symbol: string,\n  labels: string[]\n): Promise<number[]> {\n  return getApiConnection()\n    .stocks.daily(symbol, {\n      outputsize: \"full\",\n      datatype: \"json\"\n    })\n    .then(data => {\n      let series = data[\"Time Series (Daily)\"];\n      return labels.map(day => {\n        if (day in series) {\n          return series[day][\"4. close\"];\n        } else {\n          return undefined;\n        }\n      });\n    });\n}\n\nfunction days(a: string, b: string): string[] {\n  let result: Date[] = [];\n  let aTime = new Date(a).getTime();\n  let bTime = new Date(b).getTime();\n\n  while (bTime >= aTime) {\n    // Pushing date to the top of the array in order to keep it sorted\n    result.unshift(new Date(bTime));\n    bTime = bTime - MILLI_DAY_FACTOR;\n  }\n\n  return result.map(\n    date =>\n      `${date.getFullYear()}-${(\"0\" + (date.getMonth() + 1)).slice(-2)}-${(\n        \"0\" + date.getDate()\n      ).slice(-2)}`\n  );\n}\n\nfunction dayDiff(a: Date, b: Date): number {\n  return Math.abs(b.getTime() - a.getTime()) / MILLI_DAY_FACTOR;\n}\n\nfunction subDays(date: Date, subtrahend: number): Date {\n  return new Date(date.getTime() - subtrahend * MILLI_DAY_FACTOR);\n}\n\nfunction dateToString(date: Date) {\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n}\n\nfunction stringToDate(dateString: string) {\n  let [year, month, day] = dateString.split(\"-\").map(e => parseInt(e));\n  return new Date(year, month - 1, day + 1);\n}\n\nexport { days, dayDiff, stringToDate, dateToString, subDays, getDataPoints };\n","import React from \"react\";\nimport StorageBackedComponent from \"./StorageBackedComponent\";\nimport { getQuote } from \"../helpers\";\n\nexport class Ticker extends React.Component<\n  {\n    symbol: string;\n    amount: number;\n    onSelect: (selected: boolean) => void;\n    selected: boolean;\n  },\n  { price: number | undefined; invalidSymbol: boolean }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      price: undefined,\n      invalidSymbol: false\n    };\n  }\n\n  getId = () => {\n    return `SPMS-ticker: ${btoa(this.props.symbol + this.props.amount)}`;\n  };\n\n  componentDidMount = () => {\n    getQuote(this.props.symbol).then(data => {\n      this.setState({\n        price: data,\n        invalidSymbol: data === undefined\n      });\n    });\n  };\n\n  render() {\n    let quoteLabel;\n    let quoteLabelTotal;\n\n    if (this.state.price === undefined) {\n      quoteLabel = \"...\";\n      quoteLabelTotal = \"...\";\n    } else {\n      quoteLabel = this.state.price;\n      quoteLabelTotal =\n        Math.round(this.state.price * this.props.amount * 100) / 100;\n    }\n\n    return (\n      <tr className={this.state.invalidSymbol ? \"invalid-symbol\" : \"\"}>\n        <td>\n          <input\n            type=\"checkbox\"\n            onChange={evt => this.props.onSelect(evt.target.checked)}\n            checked={this.props.selected}\n          />\n        </td>\n        <td> {this.props.symbol} </td>\n        <td>$ {quoteLabel}</td>\n        <td> {this.props.amount} </td>\n        <td>$ {quoteLabelTotal}</td>\n      </tr>\n    );\n  }\n}\n","import { Component } from \"react\";\n\nabstract class StorageBackedComponent<TS, Props> extends Component<Props> {\n  state: TS;\n  storage = window.localStorage;\n  defaultStateGet: () => TS;\n\n  constructor(props: Props, defaultStateGet: () => TS) {\n    super(props);\n    this.defaultStateGet = defaultStateGet;\n    this.state = this.defaultStateGet();\n  }\n\n  abstract getId(): string;\n\n  componentWillMount = () => {\n    this.setState(this.loadState());\n  };\n\n  componentWillUnmount = () => {\n    this.saveState(this.state);\n  };\n\n  setState = (state: TS) => {\n    super.setState(state);\n    this.saveState(state);\n  };\n\n  loadState = () => {\n    let stored = this.storage.getItem(this.getId());\n    return stored != undefined ? JSON.parse(stored) : this.defaultStateGet();\n  };\n\n  saveState = (state: TS) => {\n    this.storage.setItem(this.getId(), JSON.stringify(state));\n  };\n}\n\nexport default StorageBackedComponent;\n","import React, { Component } from \"react\";\n\nclass AddForm extends Component<{\n  addTicker: (tickerSymbol: string, shareAmount: number) => void;\n  cancel: () => void;\n}> {\n  state: {\n    tickerSymbol: string;\n    shareAmount: number;\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.state = { tickerSymbol: \"\", shareAmount: 1 };\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (this.state.tickerSymbol !== \"\" && this.state.shareAmount !== 0)\n            this.props.addTicker(\n              this.state.tickerSymbol,\n              this.state.shareAmount\n            );\n        }}\n      >\n        <label>\n          Ticker symbol\n          <input\n            type=\"text\"\n            value={this.state.tickerSymbol}\n            onChange={e => {\n              this.setState({ tickerSymbol: e.target.value });\n            }}\n          />\n        </label>\n        <label>\n          Quantity\n          <input\n            type=\"number\"\n            value={this.state.shareAmount}\n            onChange={e => {\n              this.setState({ shareAmount: e.target.value });\n            }}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n        <button onClick={() => this.props.cancel()}>Cancel</button>\n      </form>\n    );\n  }\n}\n\nexport default AddForm;\n","import React, { Component } from \"react\";\nimport { Ticker } from \"./Ticker\";\nimport StorageBackedComponent from \"./StorageBackedComponent\";\nimport AddForm from \"./AddForm\";\n\ntype PortfolioState = {\n  shareList: {\n    shareSymbol: string;\n    shareAmount: number;\n    selected: boolean;\n  }[];\n  viewMain: boolean;\n};\n\ntype PortfolioProps = {\n  name: string;\n  onRemove: () => void;\n  onGraphShow: (data: string[]) => void;\n};\n\nexport class Portfolio extends StorageBackedComponent<\n  PortfolioState,\n  PortfolioProps\n> {\n  constructor(props: PortfolioProps) {\n    super(props, () => {\n      return { shareList: [], viewMain: true };\n    });\n  }\n\n  addStock = (symbol: string, amount: number) => {\n    if (!this.state.shareList.some(elem => elem.shareSymbol === symbol)) {\n      this.setState({\n        shareList: [\n          ...this.state.shareList,\n          { shareSymbol: symbol, shareAmount: amount, selected: false }\n        ],\n        viewMain: true\n      });\n    } else {\n      window.alert(\"You've already added this stock!\");\n    }\n  };\n\n  removeStocks = (symbolList: string[]) => {\n    this.setState({\n      shareList: this.state.shareList.filter(\n        elem => !symbolList.includes(elem.shareSymbol)\n      ),\n      viewMain: true\n    });\n  };\n\n  setSelected = (itemName: string, selected: boolean) => {\n    this.setState({\n      shareList: this.state.shareList.map(share =>\n        share.shareSymbol === itemName\n          ? {\n              shareSymbol: share.shareSymbol,\n              shareAmount: share.shareAmount,\n              selected: selected\n            }\n          : share\n      ),\n      viewMain: this.state.viewMain\n    });\n  };\n\n  getId = (): string => {\n    return `SPMS-portfolio-${this.props.name}`;\n  };\n\n  render() {\n    const tickers = this.state.shareList.map(item => (\n      <Ticker\n        key={`${item.shareSymbol}-${item.shareAmount}`}\n        symbol={item.shareSymbol}\n        amount={item.shareAmount}\n        onSelect={selected => this.setSelected(item.shareSymbol, selected)}\n        selected={item.selected}\n      />\n    ));\n\n    let table;\n\n    if (tickers.length > 0) {\n      table = (\n        <table>\n          <thead>\n            <tr>\n              <th />\n              <th>Stock</th>\n              <th>Price</th>\n              <th>Quantity</th>\n              <th>Total value</th>\n            </tr>\n          </thead>\n          <tbody>{tickers}</tbody>\n        </table>\n      );\n    }\n\n    let body;\n\n    if (this.state.viewMain) {\n      body = (\n        <div>\n          {table}\n          <div className=\"button-row\">\n            <button\n              onClick={() => {\n                this.setState({\n                  shareList: this.state.shareList,\n                  viewMain: false\n                });\n              }}\n            >\n              Add stock\n            </button>\n            <button\n              disabled={!this.state.shareList.some(e => e.selected)}\n              onClick={() => {\n                this.removeStocks(\n                  this.state.shareList\n                    .filter(elem => elem.selected)\n                    .map(elem => elem.shareSymbol)\n                );\n              }}\n            >\n              Remove selected\n            </button>\n            <button\n              disabled={!this.state.shareList.some(e => e.selected)}\n              onClick={() =>\n                this.props.onGraphShow(\n                  this.state.shareList\n                    .filter(item => item.selected)\n                    .map(item => item.shareSymbol)\n                )\n              }\n            >\n              Show graph\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      body = (\n        <AddForm\n          addTicker={this.addStock}\n          cancel={() => {\n            this.setState({ shareList: this.state.shareList, viewMain: true });\n          }}\n        />\n      );\n    }\n    return (\n      <li className=\"spms-portfolio\">\n        <button\n          className=\"close-button\"\n          onClick={() => {\n            this.props.onRemove();\n          }}\n        >\n          X\n        </button>\n        <div>\n          <h2>{this.props.name}</h2>\n          {body}\n        </div>\n      </li>\n    );\n  }\n}\n","import React, { Component, Props } from \"react\";\nimport AlphaVantage from \"alphavantage-ts\";\nimport { Line } from \"react-chartjs-2\";\nimport { subDays, getDataPoints, dateToString, days } from \"../helpers\";\n\ntype PopupState = {\n  graphStart: string;\n  graphEnd: string;\n  labels: string[];\n  dataSetsList: { label: string; data: number[] }[];\n};\n\ntype PopupProps = {\n  shareList: string[];\n  onCloseButtonClick: (() => void);\n  apiConnection: AlphaVantage;\n};\n\nclass Popup extends Component<PopupProps, PopupState> {\n  constructor(props: PopupProps) {\n    super(props);\n\n    let dateA = dateToString(subDays(new Date(), 7));\n    let dateB = dateToString(new Date());\n    let labels = days(dateA, dateB);\n\n    this.state = {\n      graphStart: dateA,\n      graphEnd: dateB,\n      labels: labels,\n      dataSetsList: []\n    };\n  }\n\n  componentWillMount = () => {\n    this.updateData();\n  };\n\n  componentDidUpdate = (prevProps: PopupProps) => {\n    if (prevProps.shareList != this.props.shareList) {\n      this.setState({\n        graphStart: this.state.graphStart,\n        graphEnd: this.state.graphEnd,\n        labels: this.state.labels,\n        dataSetsList: []\n      });\n      this.updateData();\n    }\n  };\n\n  updateData = () => {\n    this.props.shareList.forEach(share => {\n      getDataPoints(share, this.state.labels).then(data => {\n        this.setState({\n          graphStart: this.state.graphStart,\n          graphEnd: this.state.graphEnd,\n          labels: this.state.labels,\n          dataSetsList: [\n            ...this.state.dataSetsList,\n            { label: share, data: data }\n          ]\n        });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"graph\">\n        <button\n          className=\"close-button\"\n          onClick={this.props.onCloseButtonClick}\n        >\n          X\n        </button>\n        <Line\n          data={{\n            labels: this.state.labels,\n            datasets: this.state.dataSetsList\n          }}\n          options={{ spanGaps: true }}\n          redraw={true}\n        />\n        <input\n          type=\"date\"\n          value={this.state.graphStart}\n          onChange={evt => {\n            this.setState({\n              graphStart: evt.target.value,\n              graphEnd: this.state.graphEnd,\n              labels: days(evt.target.value, this.state.graphStart),\n              dataSetsList: this.state.dataSetsList\n            });\n            this.updateData();\n          }}\n        />\n        <input\n          type=\"date\"\n          value={this.state.graphEnd}\n          onChange={evt => {\n            this.setState({\n              graphStart: this.state.graphStart,\n              graphEnd: evt.target.value,\n              labels: days(this.state.graphStart, evt.target.value),\n              dataSetsList: this.state.dataSetsList\n            });\n            this.updateData();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Popup;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Portfolio } from \"./component/Portfolio\";\nimport AlphaVantage from \"alphavantage-ts\";\nimport StorageBackedComponent from \"./component/StorageBackedComponent\";\nimport Popup from \"./component/Popup\";\n\nlet API_CONN = new AlphaVantage(\"9LUUJN34EO841037\");\n\nexport function getApiConnection(): AlphaVantage {\n  return API_CONN;\n}\n\ntype SpmsState = {\n  portfolioList: string[];\n  addFieldValue: string;\n  graphList: string[];\n};\n\nclass App extends StorageBackedComponent<SpmsState, {}> {\n  constructor(props: any) {\n    super(props, () => {\n      return {\n        portfolioList: [],\n        addFieldValue: \"\",\n        graphList: []\n      };\n    });\n  }\n\n  addPortfolio = (evt: any) => {\n    evt.preventDefault();\n    if (this.state.portfolioList.length < 10) {\n      if (this.state.addFieldValue != \"\") {\n        if (\n          !this.state.portfolioList.some(\n            elem => elem === this.state.addFieldValue\n          )\n        ) {\n          this.setState({\n            portfolioList: [\n              ...this.state.portfolioList,\n              this.state.addFieldValue\n            ],\n            addFieldValue: \"\",\n            graphList: this.state.graphList\n          });\n        } else {\n          window.alert(\"Portfolio names should be unique\");\n        }\n      }\n    } else {\n      window.alert(\n        \"You can only have 10 portfolios configured at the same time\"\n      );\n    }\n  };\n\n  removePortfolio = (name: string) => {\n    if (name != \"\") {\n      this.setState({\n        portfolioList: this.state.portfolioList.filter(elem => elem != name),\n        addFieldValue: \"\",\n        graphList: this.state.graphList\n      });\n    }\n  };\n\n  getId = (): string => {\n    return \"SPMS-app\";\n  };\n\n  render() {\n    const portfolios = this.state.portfolioList.map(item => (\n      <Portfolio\n        key={item}\n        name={item}\n        onRemove={() => this.removePortfolio(item)}\n        onGraphShow={data => {\n          this.setState({\n            portfolioList: this.state.portfolioList,\n            addFieldValue: this.state.addFieldValue,\n            graphList: data\n          });\n        }}\n      />\n    ));\n\n    let popup;\n\n    popup =\n      this.state.graphList.length > 0 ? (\n        <Popup\n          shareList={this.state.graphList}\n          apiConnection={getApiConnection()}\n          onCloseButtonClick={() => {\n            this.setState({\n              portfolioList: this.state.portfolioList,\n              addFieldValue: this.state.addFieldValue,\n              graphList: []\n            });\n          }}\n        />\n      ) : null;\n\n    return (\n      <div>\n        <form onSubmit={this.addPortfolio}>\n          <input\n            className=\"add-portfolio-field\"\n            onChange={evt => {\n              this.setState({\n                portfolioList: this.state.portfolioList,\n                addFieldValue: evt.target.value,\n                graphList: this.state.graphList\n              });\n            }}\n            type=\"text\"\n            value={this.state.addFieldValue}\n            placeholder=\"Enter portfolio name here and press enter\"\n          />\n        </form>\n        {popup}\n        <ul>{portfolios}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}