{"version":3,"sources":["component/Portfolio.tsx","component/Ticker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ViewEnum","Ticker","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","sharePrice","state","undefined","inherits","createClass","key","value","priceLabel","totalPriceLabel","react_default","a","createElement","shareAmount","tickerSymbol","Component","API_CONN","AddForm","_this2","onSubmit","e","preventDefault","addTicker","type","onChange","target","onClick","cancel","Portfolio","_Component2","_this3","newTicker","prevState","tickerList","toConsumableArray","concat","view","Main","body","_this4","name","map","item","Ticker_Ticker","apiConnection","className","AddStock","Portfolio_AddForm","symbol","amount","AlphaVantage","process","App","portfolio","portfolioRef","current","React","createRef","Portfolio_Portfolio","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07ef1e07.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Ticker, TickerProps } from \"./Ticker\";\nimport AlphaVantage from \"alphavantage-ts\";\n\ntype TickerDesc = { tickerSymbol: string; shareAmount: number };\n\nexport interface PortfolioProps {\n  name: string;\n  apiConnection: AlphaVantage;\n}\n\nenum ViewEnum {\n  Main,\n  AddStock\n}\n\nclass AddForm extends Component<{\n  addTicker: (tickerSymbol: string, shareAmount: number) => void;\n  cancel: () => void;\n}> {\n  state: {\n    tickerSymbol: string;\n    shareAmount: number;\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.state = { tickerSymbol: \"\", shareAmount: 0 };\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (this.state.tickerSymbol !== \"\" && this.state.shareAmount !== 0)\n            this.props.addTicker(\n              this.state.tickerSymbol,\n              this.state.shareAmount\n            );\n        }}\n      >\n        <label>\n          Ticker symbol\n          <input\n            type=\"text\"\n            value={this.state.tickerSymbol}\n            onChange={e => {\n              this.setState({ tickerSymbol: e.target.value });\n            }}\n          />\n        </label>\n        <label>\n          Quantity\n          <input\n            type=\"number\"\n            value={this.state.shareAmount}\n            onChange={e => {\n              this.setState({ shareAmount: e.target.value });\n            }}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n        <button onClick={() => this.props.cancel()}>Cancel</button>\n      </form>\n    );\n  }\n}\n\nexport class Portfolio extends Component<PortfolioProps> {\n  state: {\n    tickerList: Array<TickerDesc>;\n    view: ViewEnum;\n  };\n\n  constructor(props: PortfolioProps) {\n    super(props);\n    this.state = { tickerList: [], view: ViewEnum.Main };\n  }\n\n  addTicker = (tickerSymbol: string, shareAmount: number) => {\n    let newTicker = { tickerSymbol: tickerSymbol, shareAmount: shareAmount };\n    this.setState((prevState: any) => ({\n      tickerList: [...prevState.tickerList, newTicker]\n    }));\n  };\n\n  render() {\n    let body;\n\n    switch (this.state.view) {\n      case ViewEnum.Main:\n        body = (\n          <div>\n            <h2>{this.props.name}</h2>\n            <table>\n              <thead>\n                <tr>\n                  <th>Stock</th>\n                  <th>Price</th>\n                  <th>Total value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.tickerList.map((item: TickerDesc) => {\n                  return (\n                    <Ticker\n                      key={item.tickerSymbol}\n                      tickerSymbol={item.tickerSymbol}\n                      shareAmount={item.shareAmount}\n                      apiConnection={this.props.apiConnection}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"button-row\">\n              <button\n                onClick={() => {\n                  this.setState({ view: ViewEnum.AddStock });\n                }}\n              >\n                Add stock\n              </button>\n            </div>\n          </div>\n        );\n        break;\n      case ViewEnum.AddStock:\n        body = (\n          <AddForm\n            addTicker={(symbol: string, amount: number) => {\n              this.addTicker(symbol, amount);\n              this.setState({ view: ViewEnum.Main });\n            }}\n            cancel={() => this.setState({ view: ViewEnum.Main })}\n          />\n        );\n    }\n\n    return <div className=\"spms-portfolio\">{body}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport AlphaVantage from \"alphavantage-ts\";\n\nexport interface TickerProps {\n  tickerSymbol: string;\n  shareAmount: number;\n  apiConnection: AlphaVantage;\n}\n\nexport class Ticker extends Component<TickerProps> {\n  state: { sharePrice: number | undefined };\n  timerID: any;\n\n  constructor(props: TickerProps) {\n    super(props);\n    this.state = {\n      sharePrice: undefined\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState({ sharePrice: 23.2 });\n    // if (this.props.apiConnection !== undefined) {\n    //   this.props.apiConnection.stocks\n    //     .quote(this.props.tickerSymbol, { datatype: \"json\" })\n    //     .then(data => {\n    //       this.setState({\n    //         sharePrice: data[\"Global Quote\"][\"05. price\"]\n    //       });\n    //     });\n    // }\n  };\n\n  render() {\n    let priceLabel;\n    let totalPriceLabel;\n\n    if (this.state.sharePrice === undefined) {\n      priceLabel = <td>...</td>;\n      totalPriceLabel = priceLabel;\n    } else {\n      priceLabel = <td>$ {this.state.sharePrice}</td>;\n      totalPriceLabel = (\n        <td>$ {this.props.shareAmount * this.state.sharePrice}</td>\n      );\n    }\n\n    return (\n      <tr>\n        <td> {this.props.tickerSymbol} </td>\n        {priceLabel}\n        {totalPriceLabel}\n      </tr>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Portfolio } from \"./component/Portfolio\";\nimport AlphaVantage from \"alphavantage-ts\";\n\nlet API_CONN: AlphaVantage;\n\nif (process.env.REACT_APP_API_KEY !== undefined)\n  API_CONN = new AlphaVantage(process.env.REACT_APP_API_KEY);\n\nclass App extends Component {\n  portfolioRef: React.RefObject<Portfolio>;\n\n  constructor(props: any) {\n    super(props);\n    this.portfolioRef = React.createRef<Portfolio>();\n  }\n\n  componentDidMount = () => {\n    let portfolio = this.portfolioRef.current;\n    if (portfolio != null) {\n      portfolio.addTicker(\"AAPL\", 10);\n      portfolio.addTicker(\"MSFT\", 20);\n      portfolio.addTicker(\"NOK\", 30);\n    }\n  };\n\n  render() {\n    return (\n      <Portfolio\n        ref={this.portfolioRef}\n        name=\"Portfolio 1\"\n        apiConnection={API_CONN}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}