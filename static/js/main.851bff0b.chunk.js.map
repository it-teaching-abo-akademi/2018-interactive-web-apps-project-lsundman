{"version":3,"sources":["App.tsx","component/StorageBackedComponent.ts","component/Ticker.tsx","component/AddForm.tsx","component/Portfolio.tsx","serviceWorker.ts","index.tsx"],"names":["API_CONN","StorageBackedComponent","props","defaultStateGet","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","storage","window","localStorage","componentDidMount","setState","loadState","componentWillUnmount","saveState","state","get","prototype","assertThisInitialized","stored","getItem","getId","undefined","JSON","parse","setItem","stringify","removeStoredState","removeItem","Component","Ticker","_StorageBackedCompone","price","invalidSymbol","concat","btoa","symbol","amount","getQuote","api","stocks","quote","datatype","then","data","inherits","createClass","key","value","quoteLabel","quoteLabelTotal","_this2","react_default","a","createElement","className","onClick","onRemove","AddForm","tickerSymbol","shareAmount","onSubmit","e","preventDefault","addTicker","type","onChange","target","cancel","Portfolio","shareList","viewMain","addStock","some","elem","shareSymbol","alert","toConsumableArray","removeStock","filter","name","body","tickers","map","item","Ticker_Ticker","component_AddForm","AlphaVantage","process","App","portfolioList","addFieldValue","addPortfolio","removePortfolio","portfolios","Portfolio_Portfolio","evt","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.851bff0b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Portfolio } from \"./component/Portfolio\";\nimport AlphaVantage from \"alphavantage-ts\";\nimport StorageBackedComponent from \"./component/StorageBackedComponent\";\n\nlet API_CONN: AlphaVantage;\n\nif (process.env.REACT_APP_API_KEY !== undefined)\n  API_CONN = new AlphaVantage(process.env.REACT_APP_API_KEY);\n\nexport function getApiConnection(): AlphaVantage {\n  return API_CONN;\n}\n\nclass App extends StorageBackedComponent<\n  { portfolioList: string[]; addFieldValue: string },\n  {}\n> {\n  constructor(props: any) {\n    super(props, () => {\n      return {\n        portfolioList: [],\n        addFieldValue: \"\"\n      };\n    });\n  }\n\n  addPortfolio = () => {\n    if (this.state.addFieldValue != \"\") {\n      if (\n        !this.state.portfolioList.some(\n          elem => elem === this.state.addFieldValue\n        )\n      ) {\n        this.setState({\n          portfolioList: [\n            ...this.state.portfolioList,\n            this.state.addFieldValue\n          ],\n          addFieldValue: \"\"\n        });\n      } else {\n        window.alert(\"Portfolio names should be unique\");\n      }\n    }\n  };\n\n  removePortfolio = (name: string) => {\n    if (name != \"\") {\n      this.setState({\n        portfolioList: this.state.portfolioList.filter(elem => elem != name),\n        addFieldValue: \"\"\n      });\n    }\n  };\n\n  getId = (): string => {\n    return \"SPMS-app\";\n  };\n\n  render() {\n    const portfolios = this.state.portfolioList.map(item => (\n      <Portfolio\n        key={item}\n        name={item}\n        onRemove={() => this.removePortfolio(item)}\n      />\n    ));\n\n    return (\n      <div>\n        <div className=\"header\">\n          <button onClick={this.addPortfolio}> Add portfolio</button>\n          <input\n            onChange={evt => {\n              this.setState({\n                portfolioList: this.state.portfolioList,\n                addFieldValue: evt.target.value\n              });\n            }}\n            type=\"text\"\n            value={this.state.addFieldValue}\n          />\n        </div>\n        <ul>{portfolios}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { Component } from \"react\";\n\nabstract class StorageBackedComponent<TS, Props> extends Component<Props> {\n  state: TS;\n  storage = window.localStorage;\n  defaultStateGet: () => TS;\n\n  constructor(props: Props, defaultStateGet: () => TS) {\n    super(props);\n    this.defaultStateGet = defaultStateGet;\n    this.state = this.defaultStateGet();\n  }\n\n  abstract getId(): string;\n\n  componentDidMount = () => {\n    this.setState(this.loadState());\n  };\n\n  componentWillUnmount = () => {\n    this.saveState(this.state);\n  };\n\n  setState = (state: TS) => {\n    super.setState(state);\n    this.saveState(state);\n  };\n\n  loadState = () => {\n    let stored = this.storage.getItem(this.getId());\n    return stored != undefined ? JSON.parse(stored) : this.defaultStateGet();\n  };\n\n  saveState = (state: TS) => {\n    this.storage.setItem(this.getId(), JSON.stringify(state));\n  };\n\n  removeStoredState = () => {\n    this.storage.removeItem(this.getId());\n  };\n}\n\nexport default StorageBackedComponent;\n","import React, { Component } from \"react\";\nimport AlphaVantage from \"alphavantage-ts\";\nimport { getApiConnection } from \"../App\";\nimport StorageBackedComponent from \"./StorageBackedComponent\";\n\nexport class Ticker extends StorageBackedComponent<\n  { price: number | undefined; invalidSymbol: boolean },\n  { symbol: string; amount: number; onRemove: () => void }\n> {\n  api: AlphaVantage;\n  constructor(props: any) {\n    super(props, () => {\n      return { price: undefined, invalidSymbol: false };\n    });\n    this.api = getApiConnection();\n  }\n\n  getId = () => {\n    return `SPMS-ticker: ${btoa(this.props.symbol + this.props.amount)}`;\n  };\n\n  componentDidMount = () => {\n    if (this.state.price === undefined) this.getQuote();\n  };\n\n  getQuote = () => {\n    if (this.api !== undefined) {\n      this.api.stocks\n        .quote(this.props.symbol, { datatype: \"json\" })\n        .then(data => {\n          let price = data[\"Global Quote\"][\"05. price\"];\n          this.setState({\n            price: price,\n            invalidSymbol: price === undefined\n          });\n        });\n    }\n  };\n\n  render() {\n    let quoteLabel;\n    let quoteLabelTotal;\n\n    if (this.state.price === undefined) {\n      quoteLabel = \"...\";\n      quoteLabelTotal = \"...\";\n    } else {\n      quoteLabel = this.state.price;\n      quoteLabelTotal = this.state.price * this.props.amount;\n    }\n\n    return (\n      <tr className={this.state.invalidSymbol ? \"invalid-symbol\" : \"\"}>\n        <td> {this.props.symbol} </td>\n        <td>$ {quoteLabel}</td>\n        <td>$ {quoteLabelTotal}</td>\n        <td>\n          <button\n            onClick={() => {\n              this.removeStoredState();\n              this.props.onRemove();\n            }}\n          >\n            <i className=\"fas fa-trash\" />\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nclass AddForm extends Component<{\n  addTicker: (tickerSymbol: string, shareAmount: number) => void;\n  cancel: () => void;\n}> {\n  state: {\n    tickerSymbol: string;\n    shareAmount: number;\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.state = { tickerSymbol: \"\", shareAmount: 1 };\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (this.state.tickerSymbol !== \"\" && this.state.shareAmount !== 0)\n            this.props.addTicker(\n              this.state.tickerSymbol,\n              this.state.shareAmount\n            );\n        }}\n      >\n        <label>\n          Ticker symbol\n          <input\n            type=\"text\"\n            value={this.state.tickerSymbol}\n            onChange={e => {\n              this.setState({ tickerSymbol: e.target.value });\n            }}\n          />\n        </label>\n        <label>\n          Quantity\n          <input\n            type=\"number\"\n            value={this.state.shareAmount}\n            onChange={e => {\n              this.setState({ shareAmount: e.target.value });\n            }}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n        <button onClick={() => this.props.cancel()}>Cancel</button>\n      </form>\n    );\n  }\n}\n\nexport default AddForm;\n","import React, { Component } from \"react\";\nimport { Ticker } from \"./Ticker\";\nimport StorageBackedComponent from \"./StorageBackedComponent\";\nimport AddForm from \"./AddForm\";\n\nexport class Portfolio extends StorageBackedComponent<\n  {\n    shareList: { shareSymbol: string; shareAmount: number }[];\n    viewMain: boolean;\n  },\n  { name: string; onRemove: () => void }\n> {\n  storage = window.localStorage;\n\n  constructor(props: { name: string; onRemove: () => void }) {\n    super(props, () => {\n      return { shareList: [], viewMain: true };\n    });\n  }\n\n  addStock = (symbol: string, amount: number) => {\n    if (!this.state.shareList.some(elem => elem.shareSymbol === symbol)) {\n      this.setState({\n        shareList: [\n          ...this.state.shareList,\n          { shareSymbol: symbol, shareAmount: amount }\n        ],\n        viewMain: true\n      });\n    } else {\n      window.alert(\"You've already added this stock!\");\n    }\n  };\n\n  removeStock = (symbol: string) => {\n    this.setState({\n      shareList: this.state.shareList.filter(\n        elem => elem.shareSymbol != symbol\n      ),\n      viewMain: true\n    });\n  };\n\n  getId = (): string => {\n    return `SPMS-portfolio-${this.props.name}`;\n  };\n\n  render() {\n    const tickers = this.state.shareList.map(item => (\n      <Ticker\n        key={`${item.shareSymbol}-${item.shareAmount}`}\n        symbol={item.shareSymbol}\n        amount={item.shareAmount}\n        onRemove={() => this.removeStock(item.shareSymbol)}\n      />\n    ));\n\n    let body;\n\n    if (this.state.viewMain) {\n      body = (\n        <div>\n          <button\n            onClick={() => {\n              this.removeStoredState();\n              this.props.onRemove();\n            }}\n          >\n            Remove portfolio\n          </button>\n          <table>\n            <thead>\n              <tr>\n                <th>Stock</th>\n                <th>Price</th>\n                <th>Total value</th>\n              </tr>\n            </thead>\n            <tbody>{tickers}</tbody>\n          </table>\n          <div className=\"button-row\">\n            <button\n              onClick={() => {\n                this.setState({\n                  shareList: this.state.shareList,\n                  viewMain: false\n                });\n              }}\n            >\n              Add stock\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      body = (\n        <AddForm\n          addTicker={this.addStock}\n          cancel={() => {\n            this.setState({ shareList: this.state.shareList, viewMain: true });\n          }}\n        />\n      );\n    }\n    return (\n      <div className=\"spms-portfolio\">\n        <div>\n          <h2>{this.props.name}</h2>\n          {body}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}